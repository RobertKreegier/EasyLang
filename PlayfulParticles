# Playful Particles
# 
# drastic modification of Particles demo at
# https://easylang.online/apps/particles.html
# 
# Particles simulate an approximation of the boids flocking algorithm.
# A big difference comes in the movement calculation. In boids, each entity
# has a vector with angle and velocity, so the boids tend to "skate" along.
# In my simulation, each entity has separate X and Y velocities, so each
# entity tends to move more unidirectionally. This gives a more molecular
# feel to the groups of entities.
# 
# Number of particles
n_part = 200
# The particle's "visual" distance, the radius within which it sees other particles
Visual_Distance = 15
Personal_Space = 2

vis_dist = Visual_Distance * Visual_Distance
ps_sqr = Personal_Space * Personal_Space

# Default particle size (radius), originially 0.3125
# default_size = 0.3
# The acceleration speed of each particle
part_power = 0.005
# Maximum velocity
max_vel = 0.2
# Flock's mid point
FlockX = 50
FlockY = 50
# Background Color
bground = 000
# Set the background color
background bground
# We use two arrays to represent the x and y positions of the particles (part_x[] and part_y[]), 
# along two more arrays to represent thier x and y velocities (part_vx[] and part_vy[]).
# I also use arrays to represent each particle's color, radius and whatever other attributes
# I might think up. In C these might be encapsulated in structs. In C++ these would
# be in a class.
# In this next block of code, then, we're loading those arrays with initial values.
for i range n_part
  part_x[] &= randomf * 100
  part_y[] &= randomf * 100
  part_vx[] &= (0.5 - randomf) / 3
  part_vy[] &= (0.5 - randomf) / 3
  # part_color[] &= randomf * 999
  part_color[] &= 999
  # part_radius[] &= default_size
.
# Round a number to the specified decimal place
func Round X decimals . ret .
  multiplier = pow 10 decimals
  X = X * multiplier * 10
  X = (X + 5) / 10
  X = floor X
  ret = X / multiplier
.
# Move the particle toward a position
func MoveTo i_index jx jy . .
  if part_x[i_index] < jx
    part_vx[i_index] = part_vx[i_index] + part_power
  .
  if part_x[i_index] > jx
    part_vx[i_index] = part_vx[i_index] - part_power
  .
  if part_y[i_index] < jy
    part_vy[i_index] = part_vy[i_index] + part_power
  .
  if part_y[i_index] > jy
    part_vy[i_index] = part_vy[i_index] - part_power
  .
.
# Move the particle away from a position
func MoveAway i_index jx jy . .
  if part_x[i_index] > jx
    part_vx[i_index] = part_vx[i_index] + part_power
  .
  if part_x[i_index] < jx
    part_vx[i_index] = part_vx[i_index] - part_power
  .
  if part_y[i_index] > jy
    part_vy[i_index] = part_vy[i_index] + part_power
  .
  if part_y[i_index] < jy
    part_vy[i_index] = part_vy[i_index] - part_power
  .
.
# Match the particle's velocity with another's velocity
func MatchVel i_index jxv jyv . .
  if part_vx[i_index] < jxv
    part_vx[i_index] = part_vx[i_index] + part_power
  .
  if part_vx[i_index] > jxv
    part_vx[i_index] = part_vx[i_index] - part_power
  .
  if part_vy[i_index] < jyv
    part_vy[i_index] = part_vy[i_index] + part_power
  .
  if part_vy[i_index] > jyv
    part_vy[i_index] = part_vy[i_index] - part_power
  .
.
# We do simple collision detection with the extents of the frame. If the
# position goes out of bounds, we flip the sign of the velocity, effectively
# making the particle bounce off the walls.
func BoundsCheck i_index . .
  if part_x[i_index] > (100 - Personal_Space * 2)
    call MoveAway i_index 1000 part_y[i_index]
  .
  if part_x[i_index] < (0 + Personal_Space * 2)
    call MoveAway i_index -1000 part_y[i_index]
  .
  if part_y[i_index] > (100 - Personal_Space * 2)
    call MoveAway i_index part_x[i_index] 1000
  .
  if part_y[i_index] < (0 + Personal_Space * 2)
    call MoveAway i_index part_x[i_index] -1000
  .
.
func VelBoundCheck i_index max . .
  if part_vx[i_index] > max
    part_vx[i_index] = max
  .
  if part_vx[i_index] < -max
    part_vx[i_index] = -max
  .
  if part_vy[i_index] > max
    part_vy[i_index] = max
  .
  if part_vy[i_index] < -max
    part_vy[i_index] = -max
  .
.
# Idle the particle along
func Idle i_index . .
  # Do a bounds check
  call BoundsCheck i_index
  call VelBoundCheck i_index max_vel
  # Round the velocities to avoid floating math errors
  xvel = part_vx[i_index]
  yvel = part_vy[i_index]
  call Round xvel 3 xvel
  call Round yvel 3 yvel
  part_vx[i_index] = xvel
  part_vy[i_index] = yvel
  # Update the position by adding the velocity to it.
  part_x[i_index] += part_vx[i_index]
  part_y[i_index] += part_vy[i_index]
.
# The following block of code is run each frame of the animation.
on animate
  # Clear the screen before drawing
  # If we don't the previous frame of the animation stays on the screen
  clear
  # Loop through all the particles, moving them and drawing them
  for i range n_part
    closest_part = 0
    closest_dist = vis_dist + 1
    part_in_vis = 0
    FlockX = 0
    FlockY = 0
    # In this next loop, we look at the distances to each particle to find the closest particle
    # and its distance from i
    for j range n_part
      # These next couple if/then statements save computation time by first doing subtraction
      # of positions to see if the particles are generally close to each other (within each
      # other's box).
      dx = abs (part_x[j] - part_x[i])
      if (dx * dx) < vis_dist
        dy = abs (part_y[j] - part_y[i])
        if (dy * dy) < vis_dist
          # Then, if the particles are within each other's box, we can do a more accurate
          # but slower sqrt to get the exact distance (using the pythagorean theorem).
          dist = dx * dx + dy * dy
          if dist < vis_dist
            part_in_vis = part_in_vis + 1
            FlockX = FlockX + part_x[j]
            FlockY = FlockY + part_y[j]
            if dist < closest_dist
              if dist > 0
                closest_dist = dist
                closest_part = j
              .
            .
          .
        .
      .
    .
    # Move the particle. This is where the "AI" is.
    if closest_part > 0
      if closest_dist < ps_sqr
        call MoveAway i part_x[closest_part] part_y[closest_part]
      else
        # Find the centroid of the flock and MoveTo it
        XCentroid = FlockX / part_in_vis
        YCentroid = FlockY / part_in_vis
        call MoveTo i XCentroid YCentroid
        call MatchVel i part_vx[closest_part] part_vy[closest_part]
      .
    .
    call Idle i
    # Finally draw the particle...
    # move the draw cursor to part_x[], part_y[]
    move part_x[i] part_y[i]
    # Set the draw color for this particle
    color part_color[i]
    # Draw the particle
    # circle part_radius[i] + movedaway * 0.1
    linewidth 0.2
    line (part_x[i] + part_vx[i]) (part_y[i] + part_vy[i])
    # if i = 0
    #  # linewidth 0.5
    #  textsize 2
    #  color 999
    #  move 2 2
    #  text "Current X vel: " & part_vx[i]
    #  move 2 4
    #  text "Current Y vel: " & part_vy[i]
    #  move 2 6
    #  text "Closest X vel: " & part_vx[closest_part]
    #  move 2 8
    #  text "Closest Y vel: " & part_vy[closest_part]
    #  move 2 10
    #  text "Closest distance: " & closest_dist
    #  move 2 12
    #  text "Centroid X: " & XCentroid & ", Centroid Y: " & YCentroid
    #  move 2 14
    #  text "Closest part: " & closest_part
    # .
  .
.
